/**
 def = definition - определение
 Для каждого параметра метода должна явно задаваться
 аннотация типа (даблы/инты и т д) - это обязательное требование -
 компилятор не выводит автоматически тип ля параметров метода.
 После аргументов пишут :Type - это тип возвращаемого значения метода,
 если возвращать ничего не  нужно то пишут :Unit, при этом возвращаемое
 значение компилятор может привести автоматически и допускается его не указывать.
 Потом идет символ присвоения метода "=" и тело метода.

 Знак "=" в синтаксисе метода означает:
 Метод определяет выражение результатом которого становится значение
 */

def max(a: Int, b: Int): Int = if (b > a) b else a
max(1, 2)

val add = (a: Int, b: Int) => a + b // Это функциональная переменная
val add1: (Int, Int) => Int = (a, b) => a + b
add(1, 2)
add1(1, 2)

/**
 Методы должны принадлежать потоку, классу или объекту
 */
 def sumSqr(a: Int, b: Int): Int = { // Здесь явно должен быть указан возвращаемый тип, т.к. исп-ся return
   def sqr(x: Int) = x * x // Вложенный метод
   if (a + b > 100) return -1
   sqr(a) + sqr(b)
 }

sumSqr(2, 3)
sumSqr(50, 70)

def sumSqr2(a: Int, b: Int) = { // Здесь :Int = не нужен, т.к. нет return
  def sqr(x: Int) = x * x

  if (a + b > 100) -1
  else sqr(a) + sqr(b)
}

sumSqr(2, 3)
sumSqr(50, 70)

/**
 В Скала параметры метода всегда неизменяемы, так же параметры метода
 нельзя в принципе сделать мутируемыми, даже при помощи var.
 Java позволяем модифицировать аргументы метода, если они не final
 */

def sumSqr3(a: Int, b: Int) = {
  //a = a * a //error
  //b = b * b //error
  a + b
}